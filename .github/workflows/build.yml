name: strongR-frida

on:
  schedule:
  workflow_dispatch:

jobs:
  build_and_release:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x86, x86_64, arm, arm64]
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js and Java
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Set up Python 3.11 and install dependencies
      uses: actions/setup-python@v2
      with:
        python-version: 3.11
      run: |
        sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt-get install build-essential tree ninja-build gcc-multilib g++-multilib lib32stdc++-9-dev flex bison ruby ruby-dev python3-requests python3-setuptools python3-dev python3-pip libc6-dev libc6-dev-i386 -y
        sudo gem install fpm -v 1.11.0 --no-document
        python3 -m pip install lief graphlib

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b

    - name: Pull Frida Latest Release
      id: pullFridaLatestRelease
      uses: actions/github-script@v3.1.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const releaseResponse = await github.repos.getLatestRelease({
            owner: 'frida',
            repo: 'frida',
          })
          const { data: { tag_name: ver } } = releaseResponse;
          core.setOutput('FRIDA_VERSION', ver);

    - name: Check if release already exists
      id: checkReleaseVersion
      uses: actions/github-script@v3.1.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const releaseVersion = '${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}';
            const releaseResponse = await github.repos.getReleaseByTag({
              owner: '${{ secrets.GIT_OWNER }}',
              repo: '${{ secrets.GIT_REPO }}',
              tag: releaseVersion
            });
            const { data: { tag_name: ver } } = releaseResponse;
            if (ver === releaseVersion) {
              core.setOutput('ALREADY_RELEASE', '1');
            } else {
              core.setOutput('ALREADY_RELEASE', '0');
            }
          } catch (e) {
            core.setOutput('ALREADY_RELEASE', '0');
          }

    - name: Create Release if not already created
      if: steps.checkReleaseVersion.outputs.ALREADY_RELEASE == '0'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}
        release_name: ${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}
        prerelease: false

    - name: Build frida for Android
      shell: bash
      run: |
        git config --global user.name "gitAction"
        git config --global user.email "gitAction@gmail.com"
        git clone ${{ secrets.PATCH_REPO }}
        export ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}
        git clone --recurse-submodules https://github.com/frida/frida
        cd frida/subprojects/frida-core
        git am ../../../Patchs/strongR-frida/frida-core/*.patch
        cd ../../frida-gum/gum
        git am ../../../../Patchs/strongR-frida/frida-gum/*.patch
        cd ../../../
        
    - name: Configure and Compile Frida
      shell: bash
      run: |
        cd frida
        ./configure  --host=android-${{ matrix.arch }} --enable-portal -- -Dfrida-gum:devkits=gum,gumjs -Dfrida-core:devkits=core
        make

    - name: Package and Upload Assets
      run: |
        pushd frida
        # Package Frida server and inject binaries
        xz build/frida-android-${{ matrix.arch }}/bin/frida-server
        xz build/frida-android-${{ matrix.arch }}/bin/frida-inject
        xz build/frida-android-${{ matrix.arch }}/lib/frida/32/frida-gadget.so
        popd
        
    - name: Upload Assets for Android
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
        asset_path: '${{ github.workspace }}/frida/build/frida-android-${{ matrix.arch }}/bin/frida-server.xz'
        asset_name: 'hluda-server-${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}-android-${{ matrix.arch }}.xz'
        asset_content_type: application/octet-stream

    - name: Upload frida-inject for Android
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
        asset_path: '${{ github.workspace }}/frida/build/frida-android-${{ matrix.arch }}/bin/frida-inject.xz'
        asset_name: 'hluda-inject-${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}-android-${{ matrix.arch }}.xz'
        asset_content_type: application/octet-stream

    - name: Upload frida-gadget for Android
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
        asset_path: '${{ github.workspace }}/frida/build/frida-android-${{ matrix.arch }}/lib/frida/32/frida-gadget.so.xz'
        asset_name: 'hluda-gadget-${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}-android-${{ matrix.arch }}.xz'
        asset_content_type: application/octet-stream
